datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servers   Server[]  @relation("ServerOwner")
  subusers  Subuser[]
}

model Server {
  id             String    @id @default(uuid())
  name           String
  containerName  String    @unique
  port           Int
  ownerId        String
  owner          User      @relation("ServerOwner", fields: [ownerId], references: [id])
  nodeId         String
  node           Node      @relation(fields: [nodeId], references: [id])
  currentPlayers Int?
  maxPlayers     Int?
  isOnline       Boolean   @default(false)
  subusers       Subuser[]
}

model Node {
  id             String   @id @default(uuid())
  uuid           String?
  tokenId        String?
  token          String   @unique
  name           String
  description    String?
  locationId     String
  location       Location @relation(fields: [locationId], references: [id])
  fqdn           String
  useSSL         Boolean
  behindProxy    Boolean  @default(false)
  memory         Int // in MB
  disk           Int // in MB
  daemonPort     Int
  daemonSftpPort Int
  ports          Json
  visibility     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  servers        Server[]
}

model Subuser {
  id         String  @id @default(uuid())
  serverId   String
  server     Server  @relation(fields: [serverId], references: [id])
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  canStart   Boolean @default(false)
  canStop    Boolean @default(false)
  canConsole Boolean @default(false)
}

model Location {
  id        String   @id @default(uuid())
  name      String
  shortCode String   @unique
  nodes     Node[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
